// <auto-generated />
using System;
using AisMKIT.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace AisMKIT.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("AisMKIT.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<int>("DepartmentsId")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("DepartmentsId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("AisMKIT.Models.ClNagradTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Desciption")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ClNagradTypes");
                });

            modelBuilder.Entity("AisMKIT.Models.ClOKNTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Desciption")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ClOKNTypes");
                });

            modelBuilder.Entity("AisMKIT.Models.ClObjProizIskusCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Desciption")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ClObjProizIskusCategory");
                });

            modelBuilder.Entity("AisMKIT.Models.ClObjProizIskusTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Desciption")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ClObjProizIskusTypes");
                });

            modelBuilder.Entity("AisMKIT.Models.ClServices", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Desciption")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ClServices");
                });

            modelBuilder.Entity("AisMKIT.Models.ClUchZavedCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Desciption")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ClUchZavedCategory");
                });

            modelBuilder.Entity("AisMKIT.Models.Departments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Contacts")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("AisMKIT.Models.DictAgencyPerm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeactiveDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("DictStatusId")
                        .HasColumnType("integer");

                    b.Property<string>("NameKyrg")
                        .HasColumnType("text");

                    b.Property<string>("NameRus")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DictStatusId");

                    b.ToTable("DictAgencyPerm");
                });

            modelBuilder.Entity("AisMKIT.Models.DictCinematographyServices", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("NameKyrg")
                        .HasColumnType("text");

                    b.Property<string>("NameRus")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DictCinematographyServices");
                });

            modelBuilder.Entity("AisMKIT.Models.DictControlType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeactiveDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("DictStatusId")
                        .HasColumnType("integer");

                    b.Property<string>("NameKyrg")
                        .HasColumnType("text");

                    b.Property<string>("NameRus")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DictStatusId");

                    b.ToTable("DictControlType");
                });

            modelBuilder.Entity("AisMKIT.Models.DictDistrict", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<int>("DictRegionId")
                        .HasColumnType("integer");

                    b.Property<string>("NameKyrg")
                        .HasColumnType("text");

                    b.Property<string>("NameRus")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DictRegionId");

                    b.ToTable("DictDistrict");
                });

            modelBuilder.Entity("AisMKIT.Models.DictEduInstType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("NameKyrg")
                        .HasColumnType("text");

                    b.Property<string>("NameRus")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DictEduInstType");
                });

            modelBuilder.Entity("AisMKIT.Models.DictFinSource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeactiveDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("DictStatusId")
                        .HasColumnType("integer");

                    b.Property<string>("NameKyrg")
                        .HasColumnType("text");

                    b.Property<string>("NameRus")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DictStatusId");

                    b.ToTable("DictFinSource");
                });

            modelBuilder.Entity("AisMKIT.Models.DictLegalForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeactiveDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("DictStatusId")
                        .HasColumnType("integer");

                    b.Property<string>("NameKyrg")
                        .HasColumnType("text");

                    b.Property<string>("NameRus")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DictStatusId");

                    b.ToTable("DictLegalForm");
                });

            modelBuilder.Entity("AisMKIT.Models.DictMediaControlResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeactiveDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("DictStatusId")
                        .HasColumnType("integer");

                    b.Property<string>("NameKyrg")
                        .HasColumnType("text");

                    b.Property<string>("NameRus")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DictStatusId");

                    b.ToTable("DictMediaControlResult");
                });

            modelBuilder.Entity("AisMKIT.Models.DictMediaDistribTerritory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("NameKyrg")
                        .HasColumnType("text");

                    b.Property<string>("NameRus")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DictMediaDistribTerritory");
                });

            modelBuilder.Entity("AisMKIT.Models.DictMediaFreqRelease", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeactiveDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("DictStatusId")
                        .HasColumnType("integer");

                    b.Property<string>("NameKyrg")
                        .HasColumnType("text");

                    b.Property<string>("NameRus")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DictStatusId");

                    b.ToTable("DictMediaFreqRelease");
                });

            modelBuilder.Entity("AisMKIT.Models.DictMediaLangType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeactiveDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("DictStatusId")
                        .HasColumnType("integer");

                    b.Property<string>("NameKyrg")
                        .HasColumnType("text");

                    b.Property<string>("NameRus")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DictStatusId");

                    b.ToTable("DictMediaLangType");
                });

            modelBuilder.Entity("AisMKIT.Models.DictMediaSuitPerm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeactiveDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("DictStatusId")
                        .HasColumnType("integer");

                    b.Property<string>("NameKyrg")
                        .HasColumnType("text");

                    b.Property<string>("NameRus")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DictStatusId");

                    b.ToTable("DictMediaSuitPerm");
                });

            modelBuilder.Entity("AisMKIT.Models.DictMediaType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeactiveDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("DictStatusId")
                        .HasColumnType("integer");

                    b.Property<string>("NameKyrg")
                        .HasColumnType("text");

                    b.Property<string>("NameRus")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DictStatusId");

                    b.ToTable("DictMediaType");
                });

            modelBuilder.Entity("AisMKIT.Models.DictMonumemtSignOfLoss", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("NameKyrg")
                        .HasColumnType("text");

                    b.Property<string>("NameRus")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DictMonumemtSignOfLoss");
                });

            modelBuilder.Entity("AisMKIT.Models.DictMonumentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("NameKyrg")
                        .HasColumnType("text");

                    b.Property<string>("NameRus")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DictMonumentType");
                });

            modelBuilder.Entity("AisMKIT.Models.DictMonumentTypologicalType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("NameKyrg")
                        .HasColumnType("text");

                    b.Property<string>("NameRus")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DictMonumentTypologicalType");
                });

            modelBuilder.Entity("AisMKIT.Models.DictRegion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("NameKyrg")
                        .HasColumnType("text");

                    b.Property<string>("NameRus")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DictRegion");
                });

            modelBuilder.Entity("AisMKIT.Models.DictStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DictStatus");
                });

            modelBuilder.Entity("AisMKIT.Models.DictTheatricalHall", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("NameKyrg")
                        .HasColumnType("text");

                    b.Property<string>("NameRus")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DictTheatricalHall");
                });

            modelBuilder.Entity("AisMKIT.Models.DictTourismServices", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("NameKyrg")
                        .HasColumnType("text");

                    b.Property<string>("NameRus")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DictTourismServices");
                });

            modelBuilder.Entity("AisMKIT.Models.ListOfCinematography", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeactiveDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("DictDistrictId")
                        .HasColumnType("integer");

                    b.Property<int?>("DictFinSourceId")
                        .HasColumnType("integer");

                    b.Property<int?>("DictLegalFormId")
                        .HasColumnType("integer");

                    b.Property<string>("FactDistrictId")
                        .HasColumnType("text");

                    b.Property<string>("FirstNameDirector")
                        .HasColumnType("text");

                    b.Property<string>("INN")
                        .HasColumnType("text");

                    b.Property<string>("LastNameDirector")
                        .HasColumnType("text");

                    b.Property<string>("LegalAddress")
                        .HasColumnType("text");

                    b.Property<string>("LegalFactAddress")
                        .HasColumnType("text");

                    b.Property<string>("NameKyrg")
                        .HasColumnType("text");

                    b.Property<string>("NameRus")
                        .HasColumnType("text");

                    b.Property<string>("PatronicNameDirector")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("ReregistrationDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("DictDistrictId");

                    b.HasIndex("DictFinSourceId");

                    b.HasIndex("DictLegalFormId");

                    b.ToTable("ListOfCinematography");
                });

            modelBuilder.Entity("AisMKIT.Models.ListOfCinematographyHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeactiveDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("DictDistrictId")
                        .HasColumnType("integer");

                    b.Property<int?>("DictFinSourceId")
                        .HasColumnType("integer");

                    b.Property<int?>("DictLegalFormId")
                        .HasColumnType("integer");

                    b.Property<string>("FactDistrictId")
                        .HasColumnType("text");

                    b.Property<string>("FirstNameDirector")
                        .HasColumnType("text");

                    b.Property<string>("INN")
                        .HasColumnType("text");

                    b.Property<string>("LastNameDirector")
                        .HasColumnType("text");

                    b.Property<string>("LegalAddress")
                        .HasColumnType("text");

                    b.Property<string>("LegalFactAddress")
                        .HasColumnType("text");

                    b.Property<int>("ListOfCinematographyId")
                        .HasColumnType("integer");

                    b.Property<string>("NameKyrg")
                        .HasColumnType("text");

                    b.Property<string>("NameRus")
                        .HasColumnType("text");

                    b.Property<string>("PatronicNameDirector")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("ReregistrationDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("DictDistrictId");

                    b.HasIndex("DictFinSourceId");

                    b.HasIndex("DictLegalFormId");

                    b.HasIndex("ListOfCinematographyId");

                    b.ToTable("ListOfCinematographyHistory");
                });

            modelBuilder.Entity("AisMKIT.Models.ListOfCinematographyServices", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeactivateStatus")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DictCinematographyServicesId")
                        .HasColumnType("integer");

                    b.Property<int>("DictStatusId")
                        .HasColumnType("integer");

                    b.Property<int>("ListOfCinematographyId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DictCinematographyServicesId");

                    b.HasIndex("DictStatusId");

                    b.HasIndex("ListOfCinematographyId");

                    b.ToTable("ListOfCinematographyServices");
                });

            modelBuilder.Entity("AisMKIT.Models.ListOfControlMedia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime?>("ActDateControl")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("AnulmentDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateOfPenalty")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateOfPenaltyPay")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateOfSuit")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateOfSuitPerm")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DictControlTypeId")
                        .HasColumnType("integer");

                    b.Property<int?>("DictMediaControlResultId")
                        .HasColumnType("integer");

                    b.Property<int?>("DictMediaSuitPermId")
                        .HasColumnType("integer");

                    b.Property<string>("DocNumPenalty")
                        .HasColumnType("text");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("EndDatePeriod")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ListOfMediaId")
                        .HasColumnType("integer");

                    b.Property<string>("NumberOfAct")
                        .HasColumnType("text");

                    b.Property<string>("NumberOfAnulment")
                        .HasColumnType("text");

                    b.Property<string>("NumberOfSuit")
                        .HasColumnType("text");

                    b.Property<string>("NumberOfSuitPerm")
                        .HasColumnType("text");

                    b.Property<string>("NumberOfWarning")
                        .HasColumnType("text");

                    b.Property<string>("PatronicName")
                        .HasColumnType("text");

                    b.Property<string>("PenaltySum")
                        .HasColumnType("text");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("StartDatePeriod")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("WarningDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("WarningEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("WarningRemovalDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("DictControlTypeId");

                    b.HasIndex("DictMediaControlResultId");

                    b.HasIndex("DictMediaSuitPermId");

                    b.HasIndex("ListOfMediaId");

                    b.ToTable("ListOfControlMedia");
                });

            modelBuilder.Entity("AisMKIT.Models.ListOfCouncilTheatrical", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateInArtCouncil")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateOutArtCouncil")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FirstNameOfArts")
                        .HasColumnType("text");

                    b.Property<string>("LastNameOfArts")
                        .HasColumnType("text");

                    b.Property<int>("ListOfTheatricalId")
                        .HasColumnType("integer");

                    b.Property<string>("PatronicNameOfArts")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ListOfTheatricalId");

                    b.ToTable("ListOfCouncilTheatrical");
                });

            modelBuilder.Entity("AisMKIT.Models.ListOfEduInstituts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeactiveDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DictEduInstTypeId")
                        .HasColumnType("integer");

                    b.Property<int?>("DictFinSourceId")
                        .HasColumnType("integer");

                    b.Property<int?>("DictLegalFormId")
                        .HasColumnType("integer");

                    b.Property<string>("FirstNameDirector")
                        .HasColumnType("text");

                    b.Property<string>("INN")
                        .HasColumnType("text");

                    b.Property<string>("LastNameDirector")
                        .HasColumnType("text");

                    b.Property<string>("NameKyrg")
                        .HasColumnType("text");

                    b.Property<string>("NameRus")
                        .HasColumnType("text");

                    b.Property<string>("PatronicNameDirector")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("ReregistrationDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("DictEduInstTypeId");

                    b.HasIndex("DictFinSourceId");

                    b.HasIndex("DictLegalFormId");

                    b.ToTable("ListOfEduInstituts");
                });

            modelBuilder.Entity("AisMKIT.Models.ListOfEducations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ClUchZavedCategoryId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateOfCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DomenNames")
                        .HasColumnType("text");

                    b.Property<string>("INN")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ClUchZavedCategoryId");

                    b.ToTable("ListOfEducations");
                });

            modelBuilder.Entity("AisMKIT.Models.ListOfEventsTheatrical", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DayOfMonth")
                        .HasColumnType("text");

                    b.Property<int>("DictTheatricalHallId")
                        .HasColumnType("integer");

                    b.Property<int>("ListOfTheatricalId")
                        .HasColumnType("integer");

                    b.Property<string>("Month")
                        .HasColumnType("text");

                    b.Property<string>("NameOfEvent")
                        .HasColumnType("text");

                    b.Property<string>("Time")
                        .HasColumnType("text");

                    b.Property<string>("Year")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DictTheatricalHallId");

                    b.HasIndex("ListOfTheatricalId");

                    b.ToTable("ListOfEventsTheatrical");
                });

            modelBuilder.Entity("AisMKIT.Models.ListOfKinomotografie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ClUchZavedCategoryId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateOfCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DomenNames")
                        .HasColumnType("text");

                    b.Property<string>("INN")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ClUchZavedCategoryId");

                    b.ToTable("ListOfKinomotografie");
                });

            modelBuilder.Entity("AisMKIT.Models.ListOfMedia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AddressKyrg")
                        .HasColumnType("text");

                    b.Property<string>("AddressRus")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("DictFinSourceId")
                        .HasColumnType("integer");

                    b.Property<int?>("DictLegalFormId")
                        .HasColumnType("integer");

                    b.Property<int?>("DictMediaFreqReleaseId")
                        .HasColumnType("integer");

                    b.Property<int?>("DictMediaLangTypeId")
                        .HasColumnType("integer");

                    b.Property<int?>("DictMediaTypeId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("EliminationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("INN")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NameKyrg")
                        .HasColumnType("text");

                    b.Property<string>("NameRus")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("ReregistrationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Territoryy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DictFinSourceId");

                    b.HasIndex("DictLegalFormId");

                    b.HasIndex("DictMediaFreqReleaseId");

                    b.HasIndex("DictMediaLangTypeId");

                    b.HasIndex("DictMediaTypeId");

                    b.ToTable("ListOfMedia");
                });

            modelBuilder.Entity("AisMKIT.Models.ListOfMediaHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AddressKyrg")
                        .HasColumnType("text");

                    b.Property<string>("AddressRus")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("DictFinSourceId")
                        .HasColumnType("integer");

                    b.Property<int?>("DictLegalFormId")
                        .HasColumnType("integer");

                    b.Property<int?>("DictMediaFinSourceId")
                        .HasColumnType("integer");

                    b.Property<int?>("DictMediaFreqReleaseId")
                        .HasColumnType("integer");

                    b.Property<int?>("DictMediaLangTypeId")
                        .HasColumnType("integer");

                    b.Property<int?>("DictMediaTypeId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("EliminationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("INN")
                        .HasColumnType("text");

                    b.Property<int>("ListOfMediaId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NameKyrg")
                        .HasColumnType("text");

                    b.Property<string>("NameRus")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("ReregistrationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Territoryy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DictFinSourceId");

                    b.HasIndex("DictLegalFormId");

                    b.HasIndex("DictMediaFreqReleaseId");

                    b.HasIndex("DictMediaLangTypeId");

                    b.HasIndex("DictMediaTypeId");

                    b.HasIndex("ListOfMediaId");

                    b.ToTable("ListOfMediaHistory");
                });

            modelBuilder.Entity("AisMKIT.Models.ListOfMonuments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DatingOfMonument")
                        .HasColumnType("text");

                    b.Property<int?>("DictDistrictId")
                        .HasColumnType("integer");

                    b.Property<int?>("DictFinSourceId")
                        .HasColumnType("integer");

                    b.Property<int>("DictMonumemtSignOfLossId")
                        .HasColumnType("integer");

                    b.Property<int>("DictMonumentTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("LegalAddress")
                        .HasColumnType("text");

                    b.Property<string>("NameKyrg")
                        .HasColumnType("text");

                    b.Property<string>("NameRus")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DictDistrictId");

                    b.HasIndex("DictFinSourceId");

                    b.HasIndex("DictMonumemtSignOfLossId");

                    b.HasIndex("DictMonumentTypeId");

                    b.ToTable("ListOfMonuments");
                });

            modelBuilder.Entity("AisMKIT.Models.ListOfMonumetnTypologicalAccessory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DictMonumentTypologicalTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("ListOfMonumentsId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DictMonumentTypologicalTypeId");

                    b.HasIndex("ListOfMonumentsId");

                    b.ToTable("ListOfMonumetnTypologicalAccessory");
                });

            modelBuilder.Entity("AisMKIT.Models.ListOfTeleRadio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateOfPay")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("DictAgencyPermId")
                        .HasColumnType("integer");

                    b.Property<int>("ListOfMediaId")
                        .HasColumnType("integer");

                    b.Property<string>("NumOfPermGas")
                        .HasColumnType("text");

                    b.Property<int>("NumberOfPermission")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("PermElimGASDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("PermGASDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("PermissionDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("DictAgencyPermId");

                    b.HasIndex("ListOfMediaId");

                    b.ToTable("ListOfTeleRadio");
                });

            modelBuilder.Entity("AisMKIT.Models.ListOfTheatrical", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeactiveDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("DictFinSourceId")
                        .HasColumnType("integer");

                    b.Property<int?>("DictLegalFormId")
                        .HasColumnType("integer");

                    b.Property<string>("FirstNameDirector")
                        .HasColumnType("text");

                    b.Property<string>("FirstNameOfArtsDirector")
                        .HasColumnType("text");

                    b.Property<string>("INN")
                        .HasColumnType("text");

                    b.Property<string>("LastNameDirector")
                        .HasColumnType("text");

                    b.Property<string>("LastNameOfArtsDirector")
                        .HasColumnType("text");

                    b.Property<string>("NameKyrg")
                        .HasColumnType("text");

                    b.Property<string>("NameRus")
                        .HasColumnType("text");

                    b.Property<int>("NumEmployees")
                        .HasColumnType("integer");

                    b.Property<string>("PatronicNameDirector")
                        .HasColumnType("text");

                    b.Property<string>("PatronicNameOfArtsDirector")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ReregistrationDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("DictFinSourceId");

                    b.HasIndex("DictLegalFormId");

                    b.ToTable("ListOfTheatrical");
                });

            modelBuilder.Entity("AisMKIT.Models.ListOfTheatricalHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeactiveDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("DictFinSourceId")
                        .HasColumnType("integer");

                    b.Property<int?>("DictLegalFormId")
                        .HasColumnType("integer");

                    b.Property<string>("FirstNameDirector")
                        .HasColumnType("text");

                    b.Property<string>("FirstNameOfArtsDirector")
                        .HasColumnType("text");

                    b.Property<string>("INN")
                        .HasColumnType("text");

                    b.Property<string>("LastNameDirector")
                        .HasColumnType("text");

                    b.Property<string>("LastNameOfArtsDirector")
                        .HasColumnType("text");

                    b.Property<int>("ListOfTheatricalId")
                        .HasColumnType("integer");

                    b.Property<string>("NameKyrg")
                        .HasColumnType("text");

                    b.Property<string>("NameRus")
                        .HasColumnType("text");

                    b.Property<int>("NumEmployees")
                        .HasColumnType("integer");

                    b.Property<string>("PatronicNameDirector")
                        .HasColumnType("text");

                    b.Property<string>("PatronicNameOfArtsDirector")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ReregistrationDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("DictFinSourceId");

                    b.HasIndex("DictLegalFormId");

                    b.ToTable("ListOfTheatricalHistory");
                });

            modelBuilder.Entity("AisMKIT.Models.ListOfTourism", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeactiveDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("DictDistrictId")
                        .HasColumnType("integer");

                    b.Property<int?>("DictFinSourceId")
                        .HasColumnType("integer");

                    b.Property<int?>("DictLegalFormId")
                        .HasColumnType("integer");

                    b.Property<string>("FactDistrictId")
                        .HasColumnType("text");

                    b.Property<string>("FirstNameDirector")
                        .HasColumnType("text");

                    b.Property<string>("INN")
                        .HasColumnType("text");

                    b.Property<string>("LastNameDirector")
                        .HasColumnType("text");

                    b.Property<string>("LegalAddress")
                        .HasColumnType("text");

                    b.Property<string>("LegalFactAddress")
                        .HasColumnType("text");

                    b.Property<string>("NameKyrg")
                        .HasColumnType("text");

                    b.Property<string>("NameRus")
                        .HasColumnType("text");

                    b.Property<string>("PatronicNameDirector")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("ReregistrationDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("DictDistrictId");

                    b.HasIndex("DictFinSourceId");

                    b.HasIndex("DictLegalFormId");

                    b.ToTable("ListOfTourism");
                });

            modelBuilder.Entity("AisMKIT.Models.ListOfTourismHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeactiveDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("DictDistrictId")
                        .HasColumnType("integer");

                    b.Property<int?>("DictFinSourceId")
                        .HasColumnType("integer");

                    b.Property<int?>("DictLegalFormId")
                        .HasColumnType("integer");

                    b.Property<string>("FactDistrictId")
                        .HasColumnType("text");

                    b.Property<string>("FirstNameDirector")
                        .HasColumnType("text");

                    b.Property<string>("INN")
                        .HasColumnType("text");

                    b.Property<string>("LastNameDirector")
                        .HasColumnType("text");

                    b.Property<string>("LegalAddress")
                        .HasColumnType("text");

                    b.Property<string>("LegalFactAddress")
                        .HasColumnType("text");

                    b.Property<int>("ListOfTourismId")
                        .HasColumnType("integer");

                    b.Property<string>("NameKyrg")
                        .HasColumnType("text");

                    b.Property<string>("NameRus")
                        .HasColumnType("text");

                    b.Property<string>("PatronicNameDirector")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("ReregistrationDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("DictDistrictId");

                    b.HasIndex("DictFinSourceId");

                    b.HasIndex("DictLegalFormId");

                    b.HasIndex("ListOfTourismId");

                    b.ToTable("ListOfTourismHistory");
                });

            modelBuilder.Entity("AisMKIT.Models.ListOfTourismServices", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeactivateStatus")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DictStatusId")
                        .HasColumnType("integer");

                    b.Property<int>("DictTourismServicesId")
                        .HasColumnType("integer");

                    b.Property<int>("ListOfTourismId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DictStatusId");

                    b.HasIndex("DictTourismServicesId");

                    b.HasIndex("ListOfTourismId");

                    b.ToTable("ListOfTourismServices");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("AisMKIT.Models.ApplicationUser", b =>
                {
                    b.HasOne("AisMKIT.Models.Departments", "Departments")
                        .WithMany()
                        .HasForeignKey("DepartmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AisMKIT.Models.DictAgencyPerm", b =>
                {
                    b.HasOne("AisMKIT.Models.DictStatus", "DictStatus")
                        .WithMany()
                        .HasForeignKey("DictStatusId");
                });

            modelBuilder.Entity("AisMKIT.Models.DictControlType", b =>
                {
                    b.HasOne("AisMKIT.Models.DictStatus", "DictStatus")
                        .WithMany()
                        .HasForeignKey("DictStatusId");
                });

            modelBuilder.Entity("AisMKIT.Models.DictDistrict", b =>
                {
                    b.HasOne("AisMKIT.Models.DictRegion", "DictRegion")
                        .WithMany()
                        .HasForeignKey("DictRegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AisMKIT.Models.DictFinSource", b =>
                {
                    b.HasOne("AisMKIT.Models.DictStatus", "DictStatus")
                        .WithMany()
                        .HasForeignKey("DictStatusId");
                });

            modelBuilder.Entity("AisMKIT.Models.DictLegalForm", b =>
                {
                    b.HasOne("AisMKIT.Models.DictStatus", "DictStatus")
                        .WithMany()
                        .HasForeignKey("DictStatusId");
                });

            modelBuilder.Entity("AisMKIT.Models.DictMediaControlResult", b =>
                {
                    b.HasOne("AisMKIT.Models.DictStatus", "DictStatus")
                        .WithMany()
                        .HasForeignKey("DictStatusId");
                });

            modelBuilder.Entity("AisMKIT.Models.DictMediaFreqRelease", b =>
                {
                    b.HasOne("AisMKIT.Models.DictStatus", "DictStatus")
                        .WithMany()
                        .HasForeignKey("DictStatusId");
                });

            modelBuilder.Entity("AisMKIT.Models.DictMediaLangType", b =>
                {
                    b.HasOne("AisMKIT.Models.DictStatus", "DictStatus")
                        .WithMany()
                        .HasForeignKey("DictStatusId");
                });

            modelBuilder.Entity("AisMKIT.Models.DictMediaSuitPerm", b =>
                {
                    b.HasOne("AisMKIT.Models.DictStatus", "DictStatus")
                        .WithMany()
                        .HasForeignKey("DictStatusId");
                });

            modelBuilder.Entity("AisMKIT.Models.DictMediaType", b =>
                {
                    b.HasOne("AisMKIT.Models.DictStatus", "DictStatus")
                        .WithMany()
                        .HasForeignKey("DictStatusId");
                });

            modelBuilder.Entity("AisMKIT.Models.ListOfCinematography", b =>
                {
                    b.HasOne("AisMKIT.Models.DictDistrict", "DictDistrict")
                        .WithMany()
                        .HasForeignKey("DictDistrictId");

                    b.HasOne("AisMKIT.Models.DictFinSource", "DictFinSource")
                        .WithMany()
                        .HasForeignKey("DictFinSourceId");

                    b.HasOne("AisMKIT.Models.DictLegalForm", "DictLegalForm")
                        .WithMany()
                        .HasForeignKey("DictLegalFormId");
                });

            modelBuilder.Entity("AisMKIT.Models.ListOfCinematographyHistory", b =>
                {
                    b.HasOne("AisMKIT.Models.DictDistrict", "DictDistrict")
                        .WithMany()
                        .HasForeignKey("DictDistrictId");

                    b.HasOne("AisMKIT.Models.DictFinSource", "DictFinSource")
                        .WithMany()
                        .HasForeignKey("DictFinSourceId");

                    b.HasOne("AisMKIT.Models.DictLegalForm", "DictLegalForm")
                        .WithMany()
                        .HasForeignKey("DictLegalFormId");

                    b.HasOne("AisMKIT.Models.ListOfCinematography", "ListOfCinematography")
                        .WithMany()
                        .HasForeignKey("ListOfCinematographyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AisMKIT.Models.ListOfCinematographyServices", b =>
                {
                    b.HasOne("AisMKIT.Models.DictCinematographyServices", "DictCinematographyServices")
                        .WithMany()
                        .HasForeignKey("DictCinematographyServicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AisMKIT.Models.DictStatus", "DictStatus")
                        .WithMany()
                        .HasForeignKey("DictStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AisMKIT.Models.ListOfCinematography", "ListOfCinematography")
                        .WithMany()
                        .HasForeignKey("ListOfCinematographyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AisMKIT.Models.ListOfControlMedia", b =>
                {
                    b.HasOne("AisMKIT.Models.DictControlType", "DictControlType")
                        .WithMany()
                        .HasForeignKey("DictControlTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AisMKIT.Models.DictMediaControlResult", "DictMediaControlResult")
                        .WithMany()
                        .HasForeignKey("DictMediaControlResultId");

                    b.HasOne("AisMKIT.Models.DictMediaSuitPerm", "DictMediaSuitPerm")
                        .WithMany()
                        .HasForeignKey("DictMediaSuitPermId");

                    b.HasOne("AisMKIT.Models.ListOfMedia", "ListOfMedia")
                        .WithMany()
                        .HasForeignKey("ListOfMediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AisMKIT.Models.ListOfCouncilTheatrical", b =>
                {
                    b.HasOne("AisMKIT.Models.ListOfTheatrical", "ListOfTheatrical")
                        .WithMany()
                        .HasForeignKey("ListOfTheatricalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AisMKIT.Models.ListOfEduInstituts", b =>
                {
                    b.HasOne("AisMKIT.Models.DictEduInstType", "DictEduInstType")
                        .WithMany()
                        .HasForeignKey("DictEduInstTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AisMKIT.Models.DictFinSource", "DictFinSource")
                        .WithMany()
                        .HasForeignKey("DictFinSourceId");

                    b.HasOne("AisMKIT.Models.DictLegalForm", "DictLegalForm")
                        .WithMany()
                        .HasForeignKey("DictLegalFormId");
                });

            modelBuilder.Entity("AisMKIT.Models.ListOfEducations", b =>
                {
                    b.HasOne("AisMKIT.Models.ClUchZavedCategory", "ClUchZavedCategory")
                        .WithMany()
                        .HasForeignKey("ClUchZavedCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AisMKIT.Models.ListOfEventsTheatrical", b =>
                {
                    b.HasOne("AisMKIT.Models.DictTheatricalHall", "DictTheatricalHall")
                        .WithMany()
                        .HasForeignKey("DictTheatricalHallId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AisMKIT.Models.ListOfTheatrical", "ListOfTheatrical")
                        .WithMany()
                        .HasForeignKey("ListOfTheatricalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AisMKIT.Models.ListOfKinomotografie", b =>
                {
                    b.HasOne("AisMKIT.Models.ClUchZavedCategory", "ClUchZavedCategory")
                        .WithMany()
                        .HasForeignKey("ClUchZavedCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AisMKIT.Models.ListOfMedia", b =>
                {
                    b.HasOne("AisMKIT.Models.DictFinSource", "DictFinSource")
                        .WithMany()
                        .HasForeignKey("DictFinSourceId");

                    b.HasOne("AisMKIT.Models.DictLegalForm", "DictLegalForm")
                        .WithMany()
                        .HasForeignKey("DictLegalFormId");

                    b.HasOne("AisMKIT.Models.DictMediaFreqRelease", "DictMediaFreqRelease")
                        .WithMany()
                        .HasForeignKey("DictMediaFreqReleaseId");

                    b.HasOne("AisMKIT.Models.DictMediaLangType", "DictMediaLangType")
                        .WithMany()
                        .HasForeignKey("DictMediaLangTypeId");

                    b.HasOne("AisMKIT.Models.DictMediaType", "DictMediaType")
                        .WithMany()
                        .HasForeignKey("DictMediaTypeId");
                });

            modelBuilder.Entity("AisMKIT.Models.ListOfMediaHistory", b =>
                {
                    b.HasOne("AisMKIT.Models.DictFinSource", "DictFinSource")
                        .WithMany()
                        .HasForeignKey("DictFinSourceId");

                    b.HasOne("AisMKIT.Models.DictLegalForm", "DictLegalForm")
                        .WithMany()
                        .HasForeignKey("DictLegalFormId");

                    b.HasOne("AisMKIT.Models.DictMediaFreqRelease", "DictMediaFreqRelease")
                        .WithMany()
                        .HasForeignKey("DictMediaFreqReleaseId");

                    b.HasOne("AisMKIT.Models.DictMediaLangType", "DictMediaLangType")
                        .WithMany()
                        .HasForeignKey("DictMediaLangTypeId");

                    b.HasOne("AisMKIT.Models.DictMediaType", "DictMediaType")
                        .WithMany()
                        .HasForeignKey("DictMediaTypeId");

                    b.HasOne("AisMKIT.Models.ListOfMedia", "ListOfMedia")
                        .WithMany()
                        .HasForeignKey("ListOfMediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AisMKIT.Models.ListOfMonuments", b =>
                {
                    b.HasOne("AisMKIT.Models.DictDistrict", "DictDistrict")
                        .WithMany()
                        .HasForeignKey("DictDistrictId");

                    b.HasOne("AisMKIT.Models.DictFinSource", "DictFinSource")
                        .WithMany()
                        .HasForeignKey("DictFinSourceId");

                    b.HasOne("AisMKIT.Models.DictMonumemtSignOfLoss", "DictMonumemtSignOfLoss")
                        .WithMany()
                        .HasForeignKey("DictMonumemtSignOfLossId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AisMKIT.Models.DictMonumentType", "DictMonumentType")
                        .WithMany()
                        .HasForeignKey("DictMonumentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AisMKIT.Models.ListOfMonumetnTypologicalAccessory", b =>
                {
                    b.HasOne("AisMKIT.Models.DictMonumentTypologicalType", "DictMonumentTypologicalType")
                        .WithMany()
                        .HasForeignKey("DictMonumentTypologicalTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AisMKIT.Models.ListOfMonuments", "ListOfMonuments")
                        .WithMany()
                        .HasForeignKey("ListOfMonumentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AisMKIT.Models.ListOfTeleRadio", b =>
                {
                    b.HasOne("AisMKIT.Models.DictAgencyPerm", "DictAgencyPerm")
                        .WithMany()
                        .HasForeignKey("DictAgencyPermId");

                    b.HasOne("AisMKIT.Models.ListOfMedia", "ListOfMedia")
                        .WithMany()
                        .HasForeignKey("ListOfMediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AisMKIT.Models.ListOfTheatrical", b =>
                {
                    b.HasOne("AisMKIT.Models.DictFinSource", "DictFinSource")
                        .WithMany()
                        .HasForeignKey("DictFinSourceId");

                    b.HasOne("AisMKIT.Models.DictLegalForm", "DictLegalForm")
                        .WithMany()
                        .HasForeignKey("DictLegalFormId");
                });

            modelBuilder.Entity("AisMKIT.Models.ListOfTheatricalHistory", b =>
                {
                    b.HasOne("AisMKIT.Models.DictFinSource", "DictFinSource")
                        .WithMany()
                        .HasForeignKey("DictFinSourceId");

                    b.HasOne("AisMKIT.Models.DictLegalForm", "DictLegalForm")
                        .WithMany()
                        .HasForeignKey("DictLegalFormId");
                });

            modelBuilder.Entity("AisMKIT.Models.ListOfTourism", b =>
                {
                    b.HasOne("AisMKIT.Models.DictDistrict", "DictDistrict")
                        .WithMany()
                        .HasForeignKey("DictDistrictId");

                    b.HasOne("AisMKIT.Models.DictFinSource", "DictFinSource")
                        .WithMany()
                        .HasForeignKey("DictFinSourceId");

                    b.HasOne("AisMKIT.Models.DictLegalForm", "DictLegalForm")
                        .WithMany()
                        .HasForeignKey("DictLegalFormId");
                });

            modelBuilder.Entity("AisMKIT.Models.ListOfTourismHistory", b =>
                {
                    b.HasOne("AisMKIT.Models.DictDistrict", "DictDistrict")
                        .WithMany()
                        .HasForeignKey("DictDistrictId");

                    b.HasOne("AisMKIT.Models.DictFinSource", "DictFinSource")
                        .WithMany()
                        .HasForeignKey("DictFinSourceId");

                    b.HasOne("AisMKIT.Models.DictLegalForm", "DictLegalForm")
                        .WithMany()
                        .HasForeignKey("DictLegalFormId");

                    b.HasOne("AisMKIT.Models.ListOfTourism", "ListOfTourism")
                        .WithMany()
                        .HasForeignKey("ListOfTourismId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AisMKIT.Models.ListOfTourismServices", b =>
                {
                    b.HasOne("AisMKIT.Models.DictStatus", "DictStatus")
                        .WithMany()
                        .HasForeignKey("DictStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AisMKIT.Models.DictTourismServices", "DictTourismServices")
                        .WithMany()
                        .HasForeignKey("DictTourismServicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AisMKIT.Models.ListOfTourism", "ListOfTourism")
                        .WithMany()
                        .HasForeignKey("ListOfTourismId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AisMKIT.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AisMKIT.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AisMKIT.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AisMKIT.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
